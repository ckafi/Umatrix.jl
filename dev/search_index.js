var documenterSearchIndex = {"docs":
[{"location":"matrices/#","page":"Matrices","title":"Matrices","text":"umatrix\npmatrix\nustarmatrix","category":"page"},{"location":"matrices/#Umatrix.umatrix","page":"Matrices","title":"Umatrix.umatrix","text":"umatrix(weights::EsomWeights{Float64})\n\nGenerate a U-matrix for the given ESOM weights.\n\n\n\n\n\n","category":"function"},{"location":"matrices/#Umatrix.pmatrix","page":"Matrices","title":"Umatrix.pmatrix","text":"pmatrix(data::AbstractMatrix{Float64}, weights::EsomWeights{Float64}; radius = nothing)\n\nGenerate a P-matrix for the given data and ESOM weights.\n\nIf no pareto radius is given, a suitable one is estimated.\n\n\n\n\n\n","category":"function"},{"location":"matrices/#Umatrix.ustarmatrix","page":"Matrices","title":"Umatrix.ustarmatrix","text":"ustarmatrix(um::AbstractMatrix{Float64}, pm::AbstractMatrix{Int})\n\nGenerate a U*-matrix from the given U- and P-matrices.\n\n\n\n\n\nustarmatrix(data::AbstractMatrix{Float64}, weights::EsomWeights{Float64})\n\nGenerate a U*-matrix for the given data and ESOM weights.\n\n\n\n\n\n","category":"function"},{"location":"api/#Public-API-1","page":"API","title":"Public API","text":"","category":"section"},{"location":"api/#","page":"API","title":"API","text":"Modules = [Umatrix]\nPrivate = false","category":"page"},{"location":"api/#Umatrix.bestMatch","page":"API","title":"Umatrix.bestMatch","text":"bestMatch(dataPoint::AbstractVector{Float64}, weights::EsomWeights{Float64})\n\nSearch for the best matching ESOM neuron for the given data point.\n\n\n\n\n\n","category":"function"},{"location":"api/#Umatrix.esomTrain","page":"API","title":"Umatrix.esomTrain","text":"esomTrain(data::AbstractMatrix{Float64})\n\nTrain an ESOM for the given data set.\n\nUses on-line learning per default. (Batch is not yet implemented)\n\n\n\n\n\n","category":"function"},{"location":"api/#Umatrix.esomTrainOnline","page":"API","title":"Umatrix.esomTrainOnline","text":"esomTrainOnline(data::AbstractMatrix{Float64})\n\nTrain an ESOM on-line for the given data set.\n\n\n\n\n\n","category":"function"},{"location":"api/#Umatrix.plot_matrix!-Tuple","page":"API","title":"Umatrix.plot_matrix!","text":"plot_matrix(m; <keyword arguments>)\n\nVisualize the given U-, P- or U*-matrix.\n\nArguments\n\nprojection: A projection of data points to ESOM neuron to show on the map.\nclasses: The class of each data point. Used to color the dots for the projection.\nnormalize: Whether to normalize the given matrix. Default: true.\ncolorStyle: Either :umatrix or :pmatrix. Default: :umatrix.\n\n\n\n\n\n","category":"method"},{"location":"api/#Umatrix.plot_matrix!-Tuple{RecipesBase.AbstractPlot,Vararg{Any,N} where N}","page":"API","title":"Umatrix.plot_matrix!","text":"plot_matrix(m; <keyword arguments>)\n\nVisualize the given U-, P- or U*-matrix.\n\nArguments\n\nprojection: A projection of data points to ESOM neuron to show on the map.\nclasses: The class of each data point. Used to color the dots for the projection.\nnormalize: Whether to normalize the given matrix. Default: true.\ncolorStyle: Either :umatrix or :pmatrix. Default: :umatrix.\n\n\n\n\n\n","category":"method"},{"location":"api/#Umatrix.plot_matrix-Tuple","page":"API","title":"Umatrix.plot_matrix","text":"plot_matrix(m; <keyword arguments>)\n\nVisualize the given U-, P- or U*-matrix.\n\nArguments\n\nprojection: A projection of data points to ESOM neuron to show on the map.\nclasses: The class of each data point. Used to color the dots for the projection.\nnormalize: Whether to normalize the given matrix. Default: true.\ncolorStyle: Either :umatrix or :pmatrix. Default: :umatrix.\n\n\n\n\n\n","category":"method"},{"location":"api/#Umatrix.pmatrix","page":"API","title":"Umatrix.pmatrix","text":"pmatrix(data::AbstractMatrix{Float64}, weights::EsomWeights{Float64}; radius = nothing)\n\nGenerate a P-matrix for the given data and ESOM weights.\n\nIf no pareto radius is given, a suitable one is estimated.\n\n\n\n\n\n","category":"function"},{"location":"api/#Umatrix.projection","page":"API","title":"Umatrix.projection","text":"projection(data::AbstractMatrix{Float64}, weights::EsomWeights{Float64})\n\nGenerate a projection from each data point to the best matching ESOM neuron.\n\n\n\n\n\n","category":"function"},{"location":"api/#Umatrix.umatrix","page":"API","title":"Umatrix.umatrix","text":"umatrix(weights::EsomWeights{Float64})\n\nGenerate a U-matrix for the given ESOM weights.\n\n\n\n\n\n","category":"function"},{"location":"api/#Umatrix.ustarmatrix","page":"API","title":"Umatrix.ustarmatrix","text":"ustarmatrix(um::AbstractMatrix{Float64}, pm::AbstractMatrix{Int})\n\nGenerate a U*-matrix from the given U- and P-matrices.\n\n\n\n\n\n","category":"function"},{"location":"api/#Umatrix.ustarmatrix","page":"API","title":"Umatrix.ustarmatrix","text":"ustarmatrix(data::AbstractMatrix{Float64}, weights::EsomWeights{Float64})\n\nGenerate a U*-matrix for the given data and ESOM weights.\n\n\n\n\n\n","category":"function"},{"location":"api/#Internal-API-1","page":"API","title":"Internal API","text":"","category":"section"},{"location":"api/#","page":"API","title":"API","text":"Modules = [Umatrix]\nPublic = false\nOrder = [:function]","category":"page"},{"location":"api/#Umatrix.coolDown-Tuple{Val{:leadInOut},Any,Any}","page":"API","title":"Umatrix.coolDown","text":"coolDown(::Val{:leadInOut}, (start, stop), steps; leadIn = 0.1, leadOut = 0.95)\n\nReturn a linear cooldown function with lead-in and lead-out.\n\nThe range start - stop is devided into equidistant steps. If the given step is below the leadIn quantile, start is returned; if it's above the leadOut quantile, stop is returned.\n\n\n\n\n\n","category":"method"},{"location":"api/#Umatrix.coolDown-Tuple{Val{:linear},Any,Any}","page":"API","title":"Umatrix.coolDown","text":"coolDown(::Val{:linear}, (start, stop), steps)\n\nReturn a linear cooldown function.\n\nThe range start - stop is devided into equidistant steps.\n\n\n\n\n\n","category":"method"},{"location":"api/#Umatrix.correctCoords","page":"API","title":"Umatrix.correctCoords","text":"correctCoords(coords::AbstractVector{CartesianIndex{2}})\n\nRemove (if the lattice is a plane) or wrap (if the lattice is a toroid) coordinates outside of the lattice size.\n\n\n\n\n\n","category":"function"},{"location":"api/#Umatrix.directNeighbours","page":"API","title":"Umatrix.directNeighbours","text":"directNeighbours(ind::CartesianIndex{2})\n\nReturn the eight direct neighbours of index ind.\n\n\n\n\n\n","category":"function"},{"location":"api/#Umatrix.esomInit","page":"API","title":"Umatrix.esomInit","text":"esomInit(data::AbstractMatrix{Float64}, settings::Settings = defaultSettings)\n\nInitilize an ESOM with values based on settings.initMethod.\n\n\n\n\n\n","category":"function"},{"location":"api/#Umatrix.esomTrainEpoch!","page":"API","title":"Umatrix.esomTrainEpoch!","text":"esomTrainEpoch!(data, weights, radius, learningRate)\n\nTrain the ESOM for a single epoch.\n\nThis function mutates weights\n\n\n\n\n\n","category":"function"},{"location":"api/#Umatrix.esomTrainOnline!","page":"API","title":"Umatrix.esomTrainOnline!","text":"esomTrainOnline!(data::AbstractMatrix{Float64}, weights::EsomWeights{Float64})\n\nTrain the ESOM weights on-line for the given data set.\n\nThis function mutates weights\n\n\n\n\n\n","category":"function"},{"location":"api/#Umatrix.esomTrainStep!","page":"API","title":"Umatrix.esomTrainStep!","text":"esomTrainStep!(dataPoint, weights, radius, learningRate)\n\nTrain the ESOM with a single data point.\n\nThis function mutates weights\n\n\n\n\n\n","category":"function"},{"location":"api/#Umatrix.initMethod","page":"API","title":"Umatrix.initMethod","text":"initMethod(::Val{:normal_mean_std})\n\nReturns an initializer function.\n\nThe values are Normal distributed with the same mean and std as the data column.\n\n\n\n\n\n","category":"function"},{"location":"api/#Umatrix.initMethod","page":"API","title":"Umatrix.initMethod","text":"initMethod(::Val{:uniform_min_max})\n\nReturns an initializer function.\n\nThe values are uniformly distributed over min(c) max(c) of the data column.\n\n\n\n\n\n","category":"function"},{"location":"api/#Umatrix.initMethod","page":"API","title":"Umatrix.initMethod","text":"initMethod(::Val{:zeros})\n\nReturns an initializer function.\n\nThe values are set to 0.\n\n\n\n\n\n","category":"function"},{"location":"api/#Umatrix.initMethod","page":"API","title":"Umatrix.initMethod","text":"initMethod(::Val{:uniform_mean_std})\n\nReturns an initializer function.\n\nThe values are uniformly distributed between μ-2σ μ+2σ of the data column.\n\n\n\n\n\n","category":"function"},{"location":"api/#Umatrix.latticeDistance","page":"API","title":"Umatrix.latticeDistance","text":"latticeDistance(a::CartesianIndex{2}, b::CartesianIndex{2},\n\nEuclidean distance on the lattice.\n\n\n\n\n\n","category":"function"},{"location":"api/#Umatrix.neighbourhood","page":"API","title":"Umatrix.neighbourhood","text":"neighbourhoodOffsets(radius::Float64)\n\nReturn every (unique) CartesianIndex{2} in a radius-sized circle around index.\n\n\n\n\n\n","category":"function"},{"location":"api/#Umatrix.neighbourhoodKernel-Tuple{Val{:cone},Float64}","page":"API","title":"Umatrix.neighbourhoodKernel","text":"neighbourhoodKernel(::Val{:cone}, radius::Float64)\n\nReturns a linear neighbourhood decay function.\n\n\n\n\n\n","category":"method"},{"location":"api/#Umatrix.neighbourhoodKernel-Tuple{Val{:gauss},Float64}","page":"API","title":"Umatrix.neighbourhoodKernel","text":"neighbourhoodKernel(::Val{:gauss}, radius::Float64)\n\nReturns a gaussian neighbourhood decay function.\n\n\n\n\n\n","category":"method"},{"location":"api/#Umatrix.neighbourhoodKernel-Tuple{Val{:mexhat},Float64}","page":"API","title":"Umatrix.neighbourhoodKernel","text":"neighbourhoodKernel(::Val{:mexhat}, radius::Float64)\n\nReturns a \"Mexican hat\" (Ricker wavelet) neighbourhood decay function.\n\n\n\n\n\n","category":"method"},{"location":"api/#Umatrix.neighbourhoodOffsets-Tuple{Float64}","page":"API","title":"Umatrix.neighbourhoodOffsets","text":"neighbourhoodOffsets(radius::Float64)\n\nReturn every CartesianIndex{2} in a radius-sized circle around (0,0).\n\n\n\n\n\n","category":"method"},{"location":"api/#Umatrix.removeCoordsOutsideBounds","page":"API","title":"Umatrix.removeCoordsOutsideBounds","text":"removeCoordsOutsideBounds(coords::AbstractVector{CartesianIndex{2}})\n\nRemove coordinates outside of the lattice size.\n\n\n\n\n\n","category":"function"},{"location":"api/#Umatrix.shiftToHighestDensity","page":"API","title":"Umatrix.shiftToHighestDensity","text":"shiftToHighestDensity(data::AbstractMatrix{Float64}, weights::EsomWeights{Float64})\n\nShift the ESOM so the point of highest density is centered.\n\n\n\n\n\n","category":"function"},{"location":"api/#Umatrix.shiftWeights","page":"API","title":"Umatrix.shiftWeights","text":"shiftWeights(weights::EsomWeights{Float64}, pos::CartesianIndex{2})\n\nShift the ESOM so the given pos is in the middle.\n\nThis makes only sense for a toroidal map.\n\n\n\n\n\n","category":"function"},{"location":"api/#Umatrix.wrapCoordsOnToroid","page":"API","title":"Umatrix.wrapCoordsOnToroid","text":"wrapCoordsOnToroid(coords::AbstractVector{CartesianIndex{2}},\n\nWrap coordinates outside of the lattice size around the torus.\n\n\n\n\n\n","category":"function"},{"location":"esom/#","page":"ESOM Training","title":"ESOM Training","text":"esomTrain\nesomTrainOnline\nbestMatch\nprojection","category":"page"},{"location":"esom/#Umatrix.esomTrain","page":"ESOM Training","title":"Umatrix.esomTrain","text":"esomTrain(data::AbstractMatrix{Float64})\n\nTrain an ESOM for the given data set.\n\nUses on-line learning per default. (Batch is not yet implemented)\n\n\n\n\n\n","category":"function"},{"location":"esom/#Umatrix.esomTrainOnline","page":"ESOM Training","title":"Umatrix.esomTrainOnline","text":"esomTrainOnline(data::AbstractMatrix{Float64})\n\nTrain an ESOM on-line for the given data set.\n\n\n\n\n\n","category":"function"},{"location":"esom/#Umatrix.bestMatch","page":"ESOM Training","title":"Umatrix.bestMatch","text":"bestMatch(dataPoint::AbstractVector{Float64}, weights::EsomWeights{Float64})\n\nSearch for the best matching ESOM neuron for the given data point.\n\n\n\n\n\n","category":"function"},{"location":"esom/#Umatrix.projection","page":"ESOM Training","title":"Umatrix.projection","text":"projection(data::AbstractMatrix{Float64}, weights::EsomWeights{Float64})\n\nGenerate a projection from each data point to the best matching ESOM neuron.\n\n\n\n\n\n","category":"function"},{"location":"settings/#","page":"Settings","title":"Settings","text":"Umatrix.Settings","category":"page"},{"location":"settings/#Umatrix.Settings","page":"Settings","title":"Umatrix.Settings","text":"mutable struct Settings\n\nA struct that encapsulates commonly used settings for Umatrix.\n\nIf no explicit settings are given, most functions implicitly use Umatrix.defaultSettings. There are a couple of ways to change settings:\n\n# change default settings for all function calls\nUmatrix.defaultSettings.some_setting = 20\n# create new settings with the kw constructor\ns1 = Umatrix.Settings(setting1 = 23, setting2 = 42)\nsome_function(..., settings = s1)\n# copy existing settings and change it\ns2 = copy(s1)\ns2.setting3 = 99\nsome_function(..., settings = s2)\n\nFields and defaults\n\nlatticeSize           :: Tuple{Int64,Int64}     = (50, 80)\ntoroid                :: Bool                   = true\nepochs                :: Int64                  = 24\nlearningRate          :: Tuple{Float64,Float64} = (0.5, 0.1)\nlearningRateCooling   :: Symbol                 = :linear\nradius                :: Tuple{Int64,Int64}     = (24, 1)\nradiusCooling         :: Symbol                 = :linear\ninitMethod            :: Symbol                 = :uniform_min_max\nneighbourhoodKernel   :: Symbol                 = :gauss\ndistance              :: Distances.PreMetric    = Distances.Euclidean()\nshiftToHighestDensity :: Bool                   = true\n\n\n\n\n\n","category":"type"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"plot_matrix","category":"page"},{"location":"plotting/#Umatrix.plot_matrix","page":"Plotting","title":"Umatrix.plot_matrix","text":"plot_matrix(m; <keyword arguments>)\n\nVisualize the given U-, P- or U*-matrix.\n\nArguments\n\nprojection: A projection of data points to ESOM neuron to show on the map.\nclasses: The class of each data point. Used to color the dots for the projection.\nnormalize: Whether to normalize the given matrix. Default: true.\ncolorStyle: Either :umatrix or :pmatrix. Default: :umatrix.\n\n\n\n\n\n","category":"function"},{"location":"#Umatrix.jl-1","page":"Home","title":"Umatrix.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"A Julia port of the Umatrix R package.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"","category":"page"},{"location":"#","page":"Home","title":"Home","text":"From the documentation of the R package:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"By gaining the property of emergence through self-organization, the enhancement of SOMs (self organizing maps) is called Emergent SOM (ESOM). The result of the projection by ESOM is a grid of neurons which can be visualised as a three-dimensional landscape in form of the U-matrix.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"This package offers functionality for training an ESOM as well generating U-, P- and U*-matrices.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"For further details see Visualization and 3D Printing of Multivariate Data of Biomarkers.","category":"page"},{"location":"#Installation-1","page":"Home","title":"Installation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Umatrix.jl is not yet registered in the official registry of general Julia packages.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"To install the development version from a Julia REPL type ] to enter Pkg REPL mode and run","category":"page"},{"location":"#","page":"Home","title":"Home","text":"pkg> add https://github.com/ckafi/Umatrix.jl","category":"page"},{"location":"#License-1","page":"Home","title":"License","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Umatrix.jl is licensed under the Apache License v2.0. For the full license text see LICENSE.","category":"page"}]
}
